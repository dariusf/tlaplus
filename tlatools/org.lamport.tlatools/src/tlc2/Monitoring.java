package tlc2;

import tla2sany.semantic.*;
import tlc2.value.IValue;
import tlc2.value.impl.*;
import util.UniqueString;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

public class Monitoring {

    static class MAction {
        List<SemanticNode> pre;
        List<SemanticNode> effects;

        public MAction(List<SemanticNode> pre, List<SemanticNode> effects) {
            this.pre = pre;
            this.effects = effects;
        }
    }

    static int n = 0;

    static String fresh() {
        return "v" + n++;
    }

    public static void convert(Map<UniqueString, IValue> initialState, ModuleNode rootModule) {
        UniqueString moduleName = rootModule.getName();
        List<OpDeclNode> variables = Arrays.asList(rootModule.getVariableDecls());

        List<OpDefNode> definitions = rootModule.getDefinitions().stream()
                .filter(Monitoring::operatorWhitelist)
                .map(d -> (OpDefNode) d)
                .collect(Collectors.toList());


        String monitorFns = definitions.stream().flatMap(d -> {
            if (d.getBody() instanceof SubstInNode) {
                // INSTANCE declarations are one instance of this
                return Stream.of();
            }
            if (!(d.getBody() instanceof OpApplNode)) {
                throw fail("not op appl node?");
            }
            MAction action = splitPreEff(d.getBody());
            String body = translate(action);
            String eq = "if !reflect.DeepEqual(m.state, c) {\npanic(\"state not equal\")\n}";
            return Stream.of(String.format("func (m *Monitor) %s(c State, params map[string]interface{}, msg map[string]interface{}) {\n%s\n%s\n}", d.getName(), eq, body));
        }).collect(Collectors.joining("\n"));

        String pkg = "monitoring";
        String varDecls = variables.stream().map(v -> String.format("%s interface{}", v.getName())).collect(Collectors.joining("\n"));
        String stateStruct = String.format("type State struct {\n%s\n}", varDecls);
        String monitorStruct = "type Monitor struct {\nstate State\n}";
        String initializers = initialState.entrySet().stream().map(e -> String.format("%s: %s,", e.getKey(), translateIValue(e.getValue()))).collect(Collectors.joining("\n"));
        String initial = String.format("func New() {\ns := State{\n%s\n}\nreturn Monitor{state: s}\n}", initializers);
        String packageDecl = String.format("package %s", pkg);
        String module = String.join("\n\n", packageDecl, stateStruct, monitorStruct, initial, monitorFns);

        Path filename = Paths.get(moduleName + ".go");
        try {
            Files.write(filename, module.getBytes());
        } catch (IOException e) {
            throw new RuntimeException(e);
        }
        System.out.println(filename.toAbsolutePath());
    }

    private static boolean operatorWhitelist(SemanticNode d) {
        if (d instanceof OpDefNode) {
            String name = ((OpDefNode) d).getName().toString();
            List<String> extra = List.of("TC", "TCConsistent", "SoupSize", "TargetLength", "TargetA", "ConstrB", "TargetCommit", "TargetAbort");
            if (name.contains("TypeOK") || name.contains("Spec") || name.contains("vars") ||
                    name.contains("Next") || name.contains("Init")) {
                // Init is ignored because it's already availale.
                // we should get the actions from Next but we just keep everything left instead.
                return false;
            } else if (extra.contains(name)) {
                // User-defined blacklist
                return false;
            } else if (List.of("Messages", "Receive", "Send", "ToSet", "Option", "Some", "None").contains(name)) {
                // Library functions
                return false;
            } else if (List.of("Terminating", "Termination").contains(name)) {
                // generated by the PlusCal translator
                return false;
            }
            return true;
        } else {
            throw fail("not an op def node?");
        }
    }

    private static boolean isNotPrimed(SemanticNode body) {
        if (isConstant(body)) {
            return true;
        } else if (body instanceof OpApplNode) {
            if (isPrimedVar(body)) {
                return false;
            }
            return operatorArgs(body).stream().allMatch(Monitoring::isNotPrimed);
        }
        return true;
    }

    private static boolean isVar(SemanticNode body) {
        return body instanceof OpApplNode && ((OpApplNode) body).getArgs().length == 0;
    }

    private static String getVarName(OpApplNode fml) {
        return fml.getOperator().getName().toString();
    }

    private static boolean isPrimedVar(SemanticNode body) {
        return ((OpApplNode) body).getOperator().getName().equals("'");
    }

    private static boolean isConstant(SemanticNode body) {
        return body instanceof StringNode || body instanceof NumeralNode;
    }

    private static List<ExprOrOpArgNode> operatorArgs(SemanticNode body) {
        if (!(body instanceof OpApplNode)) {
            throw fail("not an operator");
        }
        return new ArrayList<>(Arrays.asList(((OpApplNode) body).getArgs()));
    }

    /**
     * splits an operator body (represented as a $ConjList) into a list of preconditions and effects
     */
    private static MAction splitPreEff(SemanticNode body) {
        if (!(body instanceof OpApplNode)) {
            throw fail("not op app node?");
        }
        UniqueString name = ((OpApplNode) body).getOperator().getName();
        List<ExprOrOpArgNode> args = operatorArgs((OpApplNode) body);
        if (name.equals("$ConjList")) {
            List<SemanticNode> pre = new ArrayList<>();
            List<SemanticNode> effects = new ArrayList<>();
            args.stream().map(Monitoring::splitPreEff).forEach(m -> {
                pre.addAll(m.pre);
                effects.addAll(m.effects);
            });
            return new MAction(pre, effects);
        }
        boolean unprimed = args.stream().allMatch(Monitoring::isNotPrimed);
        // check if it involves primed variables
        if (unprimed) {
            return new MAction(List.of(body), List.of());
        } else {
            return new MAction(List.of(), List.of(body));
        }
    }

    private static String translate(MAction action) {
        return action.pre.stream().map(Monitoring::translatePre)
                .map(b -> b.block)
                .collect(Collectors.joining("\n")) + "\n\n" +
                action.effects.stream().map(Monitoring::translateEffect)
                        .map(b -> b.block)
                        .collect(Collectors.joining("\n"));
    }

    private static GoBlock translateEffect(SemanticNode fml) {
        if (!(fml instanceof OpApplNode)) {
            throw fail("not app?");
        }
        String name = ((OpApplNode) fml).getOperator().getName().toString();
        List<ExprOrOpArgNode> args = operatorArgs(fml);
        if (name.equals("=")) {
            // figure out which is the variable
            SemanticNode var, val;
            if (isPrimedVar(args.get(0))) {
                var = args.get(0);
                val = args.get(1);
            } else {
                var = args.get(1);
                val = args.get(0);
            }

            if (val instanceof OpApplNode && ((OpApplNode) val).getOperator().getName().equals("$Except")) {
                List<ExprOrOpArgNode> child = operatorArgs(val);
                ExprOrOpArgNode unprimed = child.get(0);
                List<ExprOrOpArgNode> pairArgs = operatorArgs(child.get(1));
                ExprOrOpArgNode map = operatorArgs(pairArgs.get(0)).get(0);
                ExprOrOpArgNode key = pairArgs.get(1);
                return goBlock("%s[%s] = %s",
                        translateExpr(unprimed),
                        translateExpr(map),
                        translateExpr(key));
            }

            GoExpr var1 = translateExpr(var);
            GoExpr val1 = translateExpr(val);
            // this does not check definitions, which is fine if both are variables.
            // in other words we error on the side of generating a spurious assignment.
            if (var1.expr.equals(val1.expr)) {
                return goBlock("// UNCHANGED %s", var1);
            } else {
                return goBlock("%s = %s", var1, val1);
            }
        } else if (name.equals("$ConjList")) {
            return goBlock(args.stream().map(Monitoring::translateEffect)
                    .map(b -> b.block)
                    .collect(Collectors.joining("\n")));
        } else if (name.equals("$IfThenElse")) {
            return goBlock("if %s {\n%s\n} else {\n%s\n}",
                    translateExpr(args.get(0)),
                    translateEffect(args.get(1)),
                    translateEffect(args.get(2)));
        }
        throw fail("unrecognised operator");
    }

    private static class GoExpr {
        List<String> defs = new ArrayList<>();
        String expr;
    }

    private static class GoBlock {
        String block;

        public GoBlock(String block) {
            this.block = block;
        }
    }

//    private static GoExpr goExprDef(String def, String ) {
//        GoExpr res = new GoExpr();
//        res.defs.add(def);
//        res.expr = expr;
//        return res;
//    }

    private static GoExpr goExpr(GoBlock block, String fmt, Object... args) {
        GoExpr res = new GoExpr();
        res.defs.add(block.block);
        GoExpr e = goExpr(fmt, args);
        res.defs.addAll(e.defs);
        res.expr = e.expr;
        return res;
    }

    private static GoExpr joinGoExpr(List<GoExpr> exprs, String s) {
        GoExpr res = new GoExpr();
        res.expr = exprs.stream().map(e -> {
            res.defs.addAll(e.defs);
            return e.expr;
        }).collect(Collectors.joining(s));
        return res;
    }

    /**
     * args may be strings or GoExprs.
     * definitions are accumulated.
     */
    private static GoExpr goExpr(String fmt, Object... args) {
        GoExpr res = new GoExpr();
        Object[] args1 = Arrays.stream(args).flatMap(a -> {
            if (a instanceof String) {
                return Stream.of(a);
            } else if (a instanceof List) {
                throw fail("invalid");
//                return ((List<?>) a).stream().peek(b -> {
//                    // this only goes one level deep
//                    if (b instanceof GoExpr) {
//                        res.defs.addAll(((GoExpr) b).defs);
//                    }
//                });
            } else if (a instanceof GoExpr) {
                res.defs.addAll(((GoExpr) a).defs);
                return Stream.of(((GoExpr) a).expr);
            } else {
                throw fail("invalid");
            }
        }).toArray();
        res.expr = String.format(fmt, args1);
        return res;
    }

    /**
     * printf, but if the arguments are GoExprs, their definitions are taken
     * out and placed at the top of the resulting block.
     */
    private static GoBlock goBlock(String fmt, Object... args) {
        List<String> defs = new ArrayList<>();
        Object[] args1 = Arrays.stream(args).flatMap(a -> {
            if (a instanceof GoExpr) {
                defs.addAll(((GoExpr) a).defs);
                return Stream.of(((GoExpr) a).expr);
            } else if (a instanceof List) {
                throw fail("invalid");
//                return ((List<?>) a).stream().peek(b -> {
//                    // this only goes one level deep
//                    if (b instanceof GoExpr) {
//                        defs.addAll(((GoExpr) b).defs);
//                    }
//                });
            }
            return Stream.of(a);
        }).toArray();
        return new GoBlock(String.join("", defs) + "\n" + String.format(fmt, args1));
    }

    private static GoBlock translatePre(SemanticNode fml) {
        if (!(fml instanceof OpApplNode)) {
            throw fail("not app?");
        }
        String name = ((OpApplNode) fml).getOperator().getName().toString();
        List<ExprOrOpArgNode> args = operatorArgs(fml);
        if (name.equals("UNCHANGED")) {
            return goBlock("");
        } else if (name.equals("Send") || name.equals("Receive")) {
            return goBlock("if !reflect.DeepEqual(%s, msg) {\npanic(\"message different\")\n}",
                    translateExpr(args.get(0)));
        } else if (name.equals("=")) {
            return goBlock("if !(%s == %s) {\npanic(\"precondition failed\")\n}",
                    translateExpr(args.get(0)),
                    translateExpr(args.get(1)));
        } else if (name.equals("/=")) {
            GoExpr a1 = translateExpr(args.get(0));
            GoExpr a2 = translateExpr(args.get(1));
            return goBlock("if %s == %s {\npanic(\"/= precondition violated\")\n}", a1, a2);
        } else if (Set.of("<", "<=", ">", ">=").contains(name)){
            GoExpr a1 = translateExpr(args.get(0));
            GoExpr a2 = translateExpr(args.get(1));
            return goBlock("if ! (%s %s %s) {\npanic(\"%s precondition violated\")\n}", a1, name, a2, name);
        } else if (name.equals("\\in")) {
            GoExpr thing = translateExpr(args.get(0));
            GoExpr coll = translateExpr(args.get(1));
            return goBlock("if _, ok := %s[%s]; ok {\npanic(\"inside\")\n}", coll, thing);
        } else if (name.equals("\\notin")) {
            GoExpr thing = translateExpr(args.get(0));
            GoExpr coll = translateExpr(args.get(1));
//            String v = fresh();
//            return goBlock("%s := true\nfor _, v := range %s {\nif v == %s {\n%s = false\n}\n}\nif %s {\npanic(\"inside\")\n}",
//                    v, coll, thing, v, v);
//            if val, ok := dict["foo"]; ok {
//                //do something here
//            }
            return goBlock("if _, ok := %s[%s]; !ok {\npanic(\"inside\")\n}", coll, thing);
        }
        throw fail("unrecognised operator " + name);
    }

    /**
     * this produces an expression, but without defs
     */
    private static String translateIValue(IValue v) {
        if (v instanceof StringValue) {
            return "\"" + ((StringValue) v).getVal() + "\"";
        } else if (v instanceof IntValue) {
            return v.toString();
        } else if (v instanceof SetEnumValue) {
            // empty set
            return "map[interface{}]bool{}";
        } else if (v instanceof TupleValue) {
            // empty seq
            return "[]interface{}{}";
        } else if (v instanceof FcnRcdValue) {
            // record literals, like [r1 |-> "working"]
            List<String> res = new ArrayList<>();
            for (int i = 0; i < ((FcnRcdValue) v).domain.length; i++) {
                res.add(String.format("%s: %s",
                        translateIValue(((FcnRcdValue) v).domain[i]),
                        translateIValue(((FcnRcdValue) v).values[i])));
            }
            return String.format("map[interface{}]interface{}{%s}", res.stream().collect(Collectors.joining(", ")));
        }
        throw fail("invalid type of value " + v.getClass().getSimpleName());
    }

    private static GoExpr translateExpr(SemanticNode fml) {
        if (isConstant(fml)) {
            if (fml instanceof StringNode) {
                return goExpr("\"" + ((StringNode) fml).getRep().toString() + "\"");
            } else if (fml instanceof NumeralNode) {
                return goExpr(((NumeralNode) fml).val() + "");
            }
            throw fail("unknown");
        } else if (isVar(fml)) {
            String name = getVarName((OpApplNode) fml);
            if (name.equals("$Tuple")) {
                // somehow empty sequences land in here
                return goExpr("[]interface{}{}");
            }
            // primed variables are handled at a different level
//            return String.format("state[\"%s\"]", name);
            return goExpr("m.%s", name);
//            return name;
        } else if (isPrimedVar(fml)) {
            List<ExprOrOpArgNode> args = operatorArgs(fml);
            return translateExpr(args.get(0));
        } else if (fml instanceof OpApplNode) {
            String name = ((OpApplNode) fml).getOperator().getName().toString();
            List<ExprOrOpArgNode> args = operatorArgs(fml);
            switch (name) {
                case "<":
                case "<=":
                case ">":
                case ">=":
                case "+":
                case "-":
                case "*":
                case "/":
                    return goExpr("%s %s %s", translateExpr(args.get(0)), name, translateExpr(args.get(1)));
                case "Some":
                    return goExpr("[]interface{}{%s}", translateExpr(args.get(0)));
                case "Append":
                    return goExpr("append(%s, %s)", translateExpr(args.get(0)), translateExpr(args.get(1)));
                case "ToSet":
                    String v = fresh();
                    GoExpr a1 = translateExpr(args.get(0));
                    GoBlock def = goBlock("%s := map[interface{}]bool{}\nfor _, v := range %s {\n%s[v] = true\n}", v, a1, v);
                    return goExpr(def, "%s", v);
                case "$FcnApply":
                    GoExpr map = translateExpr(args.get(0));
                    GoExpr key = translateExpr(args.get(1));
                    return goExpr("%s[%s]", map, key);
                case "$SetEnumerate":
                    List<GoExpr> exprs = args.stream().map(Monitoring::translateExpr).collect(Collectors.toList());
                    return goExpr("map[interface{}]bool{%s}", joinGoExpr(exprs, ", "));
                case "$RcdConstructor":
                    List<GoExpr> all = args.stream().map(a -> {
                        OpApplNode op = (OpApplNode) a;
                        if (op.getOperator().getName().equals("$Pair")) {
                            List<ExprOrOpArgNode> args1 = operatorArgs(op);
                            return goExpr("%s: %s",
                                    translateExpr(args1.get(0)),
                                    translateExpr(args1.get(1)));
                        } else {
                            throw fail("unexpected");
                        }
                    }).collect(Collectors.toList());
                    return goExpr("map[string]interface{}{%s}", joinGoExpr(all, ", "));
                case "$Except":
                    throw fail("handled at a higher level");
                default:
                    throw fail("unknown?" + name);
            }
        }
        throw fail("unknown?");
    }

    private static RuntimeException fail(String s) {
        RuntimeException e = new RuntimeException(s);
        e.printStackTrace();
        return e;
    }

//    // visitors are for applying a transformation uniformly across, not stuff where we decide whether or not to recurse
//    final ExplorerVisitor visitor = new ExplorerVisitor() {
//
//        List<MAction> actions = new ArrayList<>();
//        MAction current = null;
//        @Override
//        public void preVisit(ExploreNode exploreNode) {
////                        super.preVisit(exploreNode);
//            boolean skip = exploreNode instanceof ModuleNode
//                    || exploreNode instanceof Context
//                    || exploreNode instanceof FormalParamNode;
////                                || (exploreNode instanceof OpDefNode && ((OpDefNode) exploreNode).getBody() == null)
//
//            if (exploreNode instanceof SemanticNode) {
//                TreeNode stn = ((SemanticNode) exploreNode).stn;
//                if (stn == null) {
//                    skip = true;
//                } else {
//                    switch (stn.getFilename()) {
//                        case "--TLA+ BUILTINS--":
//                        case "Naturals":
//                        case "TLC":
//                            skip = true;
//                    }
//                }
//            }
//
//            if (skip) {
//                return;
//            }
//
//            if (exploreNode instanceof OpDefNode) {
//                current = new MAction();
//                System.out.println("action " + ((OpDefNode) exploreNode).getName());
//            } else if (exploreNode instanceof OpApplNode &&
//                    ((OpApplNode) exploreNode).getOperator().getName().equals("$ConjList")) {
//
//
//            } else {
//                System.out.println(exploreNode.getClass());
//            }
//        }
//
//        @Override
//        public void postVisit(ExploreNode exploreNode) {
//            super.postVisit(exploreNode);
//        }
//    };
//                rootModule.walkGraph(new Hashtable<>(), visitor);
////                visitor.done();
//
//                Arrays.stream(tool.getActions()).forEach(a -> {
//        int b = 1;
//    });
}
