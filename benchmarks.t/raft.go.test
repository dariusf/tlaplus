func main() {

	m := NewMonitor()

	s1 := str("s1")
	s2 := str("s2")
	s3 := str("s3")
	servers := set(s1, s2, s3)

	s := State{
		matchIndex:     FnConstruct(servers, func(i TLA) TLA { return FnConstruct(servers, func(j TLA) TLA { return integer(0) }) }),
		log:            FnConstruct(servers, func(i TLA) TLA { return seq() }),
		who:            str("none"),
		state:          FnConstruct(servers, func(i TLA) TLA { return str("Follower") }),
		actions:        seq(),
		outbox:         FnConstruct(servers, func(i TLA) TLA { return seq() }),
		inflight:       seq(),
		commitIndex:    FnConstruct(servers, func(i TLA) TLA { return integer(0) }),
		currentTerm:    FnConstruct(servers, func(i TLA) TLA { return integer(1) }),
		votesResponded: FnConstruct(servers, func(i TLA) TLA { return set() }),
		nextIndex:      FnConstruct(servers, func(i TLA) TLA { return FnConstruct(servers, func(j TLA) TLA { return integer(1) }) }),
		votesGranted:   FnConstruct(servers, func(i TLA) TLA { return set() }),
		votedFor:       FnConstruct(servers, func(i TLA) TLA { return str("none") }),
		inbox:          FnConstruct(servers, func(i TLA) TLA { return seq() }),
	}

	m.CaptureState(s, Initial)

	// timeout
	s.state = Except(s.state.(Record), s1, str("Candidate"))
	// s.currentTerm = Except(s.currentTerm.(Record), s1,
	// 	IntPlus(RecordIndex(s.currentTerm.(Record), s1).(Int), integer(1)))
	s.currentTerm = Except(s.currentTerm.(Record), s1, integer(2))
	s.actions = Append(s.actions.(Seq), seq(str("Timeout"), s1))
	s.who = s1
	m.CaptureState(s, Timeout, s1)

	// -> outbox
	s.who = s1
	s2rv := record(
		str("mtype"), str("RequestVoteRequest"),
		str("mterm"), integer(2),
		str("mlastLogTerm"), integer(0),
		str("mlastLogIndex"), integer(0),
		str("msource"), s1,
		str("mdest"), s2,
	)
	s.actions = Append(s.actions.(Seq), seq(str("RequestVote"), s1, s2))
	s.outbox = Except(s.outbox.(Record), s1,
		Append(RecordIndex(s.outbox.(Record), s1).(Seq), s2rv))
	m.CaptureState(s, RequestVote, s1, s2)

	// outbox ->
	s.inflight = seq(s2rv)
	s.outbox = Except(s.outbox.(Record), s1, seq())
	s.actions = Append(s.actions.(Seq), seq(str("NetworkTakeMessage"), seq(s2rv)))
	s.who = str("Network")
	m.CaptureState(s, NetworkTakeMessage)

	// second RV
	s3rv := record(
		str("mtype"), str("RequestVoteRequest"),
		str("mterm"), integer(2),
		str("mlastLogTerm"), integer(0),
		str("mlastLogIndex"), integer(0),
		str("msource"), s1,
		str("mdest"), s3,
	)
	s.who = s1
	s.actions = Append(s.actions.(Seq), seq(str("RequestVote"), s1, s3))
	s.outbox = Except(s.outbox.(Record), s1, seq(s3rv))
	m.CaptureState(s, RequestVote, s1, s3)

	s.inflight = seq(s2rv, s3rv)
	s.outbox = Except(s.outbox.(Record), s1, seq())
	s.actions = Append(s.actions.(Seq), seq(str("NetworkTakeMessage"), seq(s3rv)))
	s.who = str("Network")
	m.CaptureState(s, NetworkTakeMessage)

	// receive rv 2
	s.inbox = Except(s.outbox.(Record), s2, seq(s2rv))
	s.inflight = seq(s3rv)
	s.actions = Append(s.actions.(Seq), seq(str("NetworkDeliverMessageSlow"), s2rv))
	s.who = str("Network")
	m.CaptureState(s, NetworkDeliverMessageSlow)

	s2rvr := record(
		str("mtype"), str("RequestVoteResponse"),
		str("mterm"), integer(1),
		str("mvoteGranted"), boolean(true),
		str("msource"), s2,
		str("mdest"), s1,
	)
	s.votedFor = Except(s.votedFor.(Record), s2, s1)
	s.inbox = Except(s.outbox.(Record), s2, seq())
	s.outbox = Except(s.outbox.(Record), s2, seq(s2rvr))
	s.who = s2
	m.CaptureState(s, HandleRequestVoteRequest, s2, s1, s2rv)

	// receive rv 3

	// s1 becomes leader

	m.CheckTrace()
	fmt.Println("ok!")
}
